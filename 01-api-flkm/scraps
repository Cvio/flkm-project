// const PORT = process.env.PORT || 3001;
// require("dotenv").config();
// const express = require("express");
// const app = express();
// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const User = require("./models/user.model"); // Import User model
// const Project = require("./models/project.model");
// const authenticate = require("./auth/auth-middleware");
// const crypto = require("crypto");

// const account-routes = require("./routes/account-routes");
// // const authRoutes = require("./routes/authRoutes");
// // const projectRoutes = require("./routes/projectRoutes");
// // const transferRoutes = require("./routes/transferRoutes");

// const multer = require("multer"); // import multer
// const storage = multer.diskStorage({
//   destination: (req, file, cb) => {
//     cb(null, "uploads/"); // define the upload destination directory
//   },
//   filename: (req, file, cb) => {
//     cb(null, new Date().toISOString() + file.originalname); // define the file name
//   },
// });

// const upload = multer({
//   storage: storage,
//   limits: { fileSize: 1024 * 1024 }, // 1 MB file size limit
//   fileFilter: (req, file, cb) => {
//     if (file.mimetype === "text/csv") {
//       cb(null, true); // allow CSV files
//     } else {
//       cb(new Error("Invalid file type. Only CSV files are allowed."));
//     }
//   },
// });

// // Use the cors middleware
// const cors = require("cors");
// app.use(cors());

// // Initialize passport.js
// const passport = require("./passport");
// app.use(passport.initialize());

// // Use the body-parser middleware
// const bodyParser = require("body-parser");
// app.use(bodyParser.json());

// // Connect to MongoDB
// const mongoose = require("mongoose");
// const mongodbUri = process.env.MONGODB_URI;
// mongoose
//   .connect(mongodbUri, {
//     useNewUrlParser: true,
//     useUnifiedTopology: true,
//   })
//   .then(async () => {
//     console.log("Connected to MongoDB");

//     // Fetch documents from a collection and display them
//     const MyModel = mongoose.model(
//       "MyModel",
//       new mongoose.Schema({ name: String })
//     );

//     try {
//       const documents = await MyModel.find({});
//       console.log("Fetched documents:", documents);
//     } catch (error) {
//       console.error("Error fetching documents:", error.message);
//     }
//   })
//   .catch((error) => {
//     console.error("Error connecting to MongoDB:", error.message);
//   });

// app.use("/api", account-routes);
// // app.use("/api", authRoutes);
// // app.use("/api", projectRoutes);
// // app.use("/api", transferRoutes);

// app.get("/user", async (req, res) => {
//   try {
//     res.status(201).json({ message: "User data here" });
//   } catch (error) {
//     console.error("Error:", error.message);
//     res.status(500).json({ message: "Error getting user data" });
//   }
// });

// app.get("/user-data", authenticate, async (req, res) => {
//   try {
//     const userId = req.user.userId;

//     // Note: Assuming User is your user model, and Project is your project model.
//     const userData = await User.findById(userId).select("username email");
//     const userProjects = await Project.find({ ownerId: userId }).select(
//       "projectName description"
//     );

//     if (!userData) return res.status(404).json({ message: "User not found" });

//     res.status(200).json({ userData, userProjects }); // Changed status to 200 as it's a successful GET request
//   } catch (error) {
//     console.error("Error fetching user data:", error);
//     res.status(500).json({ message: "Error fetching user data" });
//   }
// });

// app.get("/user-projects", authenticate, async (req, res) => {
//   try {
//     // access the authenticated user's data using req.user
//     const userId = req.user.userId;

//     // Fetch user's projects from MongoDB where ownerId matches userId
//     const userProjects = await Project.find({ ownerId: userId });

//     // Check if there are any projects found
//     if (!userProjects.length) {
//       return res
//         .status(404)
//         .json({ message: "No projects found for this user" });
//     }

//     res.status(200).json(userProjects);
//   } catch (error) {
//     console.error("Error fetching user projects:", error);
//     res.status(500).json({ message: "Error fetching user projects" });
//   }
// });

// app.post("/api/token", async (req, res) => {
//   // Generate JWT token logic
//   // ...
// });

// // User Dashboard API Endpoints
// app.get("/api/dashboard", authenticate, async (req, res) => {
//   // Fetch user dashboard data
//   // ...
// });

// // Federated Learning Project API Endpoints
// app.get("/api/projects", async (req, res) => {
//   // List FLN projects
//   // ...
// });

// app.post(
//   "/project/create-project",
//   authenticate,
//   upload.single("dataset"),
//   async (req, res) => {
//     try {
//       // get project details from the request body
//       const {
//         projectName,
//         description,
//         dataset,
//         modelType,
//         learningRate,
//         privacySettings,
//         participants,
//         startDate,
//         endDate,
//         accessControl,
//         dataPreprocessing,
//         evaluationMetrics,
//         acceptanceCriteria,
//         ownerId,
//       } = req.body;

//       // Get the file path of the uploaded dataset
//       //const datasetFilePath = req.file;

//       // Create a new project in your database
//       const newProject = new Project({
//         projectName,
//         description,
//         dataset, // save the file path in the database
//         modelType,
//         learningRate,
//         privacySettings,
//         participants,
//         startDate,
//         endDate,
//         accessControl,
//         dataPreprocessing,
//         evaluationMetrics,
//         acceptanceCriteria,
//         ownerId,
//       });
//       newProject.ownerId = req.user.userId;
//       // save the project to the database
//       const savedProject = await newProject.save();

//       res.status(201).json(savedProject);
//     } catch (error) {
//       console.error("Error creating project:", error);
//       res.status(500).json({ message: "Error creating project" });
//     }
//   }
// );

// app.get("/api/projects/:id", async (req, res) => {
//   // Get specific project details
//   // ...
// });

// app.put("/api/projects/:id", async (req, res) => {
//   // Update project details
//   // ...
// });

// app.delete("/api/projects/:id", async (req, res) => {
//   // Delete a project
//   // ...
// });

// app.post("/api/projects/:id/dataset", async (req, res) => {
//   // Upload dataset for a project
//   // ...
// });

// app.get("/api/projects/:id/participants", async (req, res) => {
//   // Get project participants
//   // ...
// });

// app.post("/api/projects/:id/participants", async (req, res) => {
//   // Add a participant to the project
//   // ...
// });

// app.put("/api/projects/:id/participants/:participantId", async (req, res) => {
//   // Update participant details
//   // ...
// });

// app.delete(
//   "/api/projects/:id/participants/:participantId",
//   async (req, res) => {
//     // Remove a participant from the project
//     // ...
//   }
// );

// // Federated Learning Training API Endpoints
// app.post("/api/projects/:id/training", async (req, res) => {
//   // Start training session
//   // ...
// });

// app.post("/api/projects/:id/training/stop", async (req, res) => {
//   // Stop training session
//   // ...
// });

// app.post("/api/projects/:id/models", async (req, res) => {
//   // Upload models for training
//   // ...
// });

// app.post("/api/projects/:id/models/validate", async (req, res) => {
//   // Validate uploaded models
//   // ...
// });

// // Federated Learning Evaluation API Endpoints
// app.post("/api/projects/:id/evaluation", async (req, res) => {
//   // Set evaluation criteria
//   // ...
// });

// app.get("/api/projects/:id/results", async (req, res) => {
//   // Get training results and metrics
//   // ...
// });

// // Data Privacy and Security API Endpoints
// app.post("/api/security/encryption", async (req, res) => {
//   // Implement data encryption
//   // ...
// });

// app.post("/api/security/compliance", async (req, res) => {
//   // Ensure GDPR compliance and data privacy
//   // ...
// });

// app.post("/api/security/storage/ipfs", async (req, res) => {
//   // IPFS data storage
//   // ...
// });

// app.get("/api/security/storage/ipfs", async (req, res) => {
//   // Retrieve data from IPFS storage
//   // ...
// });

// app.post("/api/security/storage/filecoin", async (req, res) => {
//   // Filecoin data storage
//   // ...
// });

// app.get("/api/security/storage/filecoin", async (req, res) => {
//   // Retrieve data from Filecoin storage
//   // ...
// });

// // Federated Learning Knowledge Marketplace API Endpoints
// app.get("/api/flkm/resources", async (req, res) => {
//   // List knowledge resources
//   // ...
// });

// app.post("/api/flkm/resources", async (req, res) => {
//   // Upload knowledge resources
//   // ...
// });

// app.get("/api/flkm/resources/:id", async (req, res) => {
//   // Get a specific resource
//   // ...
// });

// app.post("/api/flkm/resources/:id/access", async (req, res) => {
//   // Manage access control for resources
//   // ...
// });

// app.get("/api/flkm/smart-contracts", async (req, res) => {
//   // List deployed smart contracts
//   // ...
// });

// // Federated Learning Collaboration API Endpoints
// app.get("/api/flkm/collaborations", async (req, res) => {
//   // List collaborations
//   // ...
// });

// app.post("/api/flkm/collaborations", async (req, res) => {
//   // Create a new collaboration
//   // ...
// });

// app.get("/api/flkm/collaborations/:id", async (req, res) => {
//   // Get specific collaboration details
//   // ...
// });

// app.put("/api/flkm/collaborations/:id", async (req, res) => {
//   // Update collaboration details
//   // ...
// });

// app.delete("/api/flkm/collaborations/:id", async (req, res) => {
//   // Delete a collaboration
//   // ...
// });

// app.post("/api/flkm/collaborations/:id/contributions", async (req, res) => {
//   // Contribute to a collaboration
//   // ...
// });

// app.get(
//   "/api/flkm/collaborations/:id/contributions/rewards",
//   async (req, res) => {
//     // Calculate and distribute rewards
//     // ...
//   }
// );

// // Data Monetization API Endpoints
// app.post("/api/flkm/monetization/terms", async (req, res) => {
//   // Set terms for data monetization
//   // ...
// });

// app.get("/api/flkm/monetization/terms", async (req, res) => {
//   // Get data monetization terms
//   // ...
// });

// app.post("/api/flkm/monetization/tracking", async (req, res) => {
//   // Track data contributions and calculate earnings
//   // ...
// });

// app.get("/api/flkm/monetization/transactions", async (req, res) => {
//   // View transaction records
//   // ...
// });

// app.post("/api/flkm/monetization/payout", async (req, res) => {
//   // Request payout of earnings
//   // ...
// });

// // AI Model Repository API Endpoints
// app.get("/api/flkm/models", async (req, res) => {
//   // List AI models
//   // ...
// });

// app.post("/api/flkm/models", async (req, res) => {
//   // Upload AI models
//   // ...
// });

// app.get("/api/flkm/models/:id", async (req, res) => {
//   // Get a specific AI model
//   // ...
// });

// app.post("/api/flkm/models/:id/access", async (req, res) => {
//   // Manage access control for AI models
//   // ...
// });

// app.post("/api/flkm/models/:id/version", async (req, res) => {
//   // Manage model versions and updates
//   // ...
// });

// // Authentication & User Management API Endpoints
// app.post("/register", async (req, res) => {
//   try {
//     const { username, email, password } = req.body;

//     // Hash the password
//     const hashedPassword = await bcrypt.hash(password, 10);

//     // Generate email verification token
//     const emailVerificationToken = crypto.randomBytes(20).toString("hex");

//     console.log("Generated Token:", emailVerificationToken);

//     const { sendVerificationEmail } = require("./services/emailService");

//     // Create a new user document
//     const user = new User({
//       username,
//       email,
//       password: hashedPassword,
//       emailVerificationToken,
//     });

//     await user.save();

//     // Send verification email
//     sendVerificationEmail(email, emailVerificationToken);

//     res.status(201).json({
//       message: "User registered successfully. Please verify your email.",
//     });
//   } catch (error) {
//     console.error("Error registering user:", error);
//     res
//       .status(500)
//       .json({ message: "Error registering user", error: error.message });
//   }
// });

// // make sure you have your express app listening on some port
// app.listen(3000, () => {
//   console.log("Server is running on port 3000");
// });

// app.post("/login", async (req, res) => {
//   try {
//     const secretKey = process.env.SECRET_KEY;
//     const { username, password } = req.body;

//     // Find the user by username
//     const user = await User.findOne({ username });
//     console.log("User found:", user);

//     if (!user) {
//       console.log("User not found");
//       return res.status(401).json({ message: "Invalid credentials" });
//     }

//     // Compare passwords
//     // Inside the /login route
//     console.log("Password from request:", password);

//     // Compare passwords
//     const passwordMatch = await bcrypt.compare(password, user.password);

//     console.log("Hashed password in DB:", user.password);
//     console.log("Password match:", passwordMatch);

//     if (!passwordMatch) {
//       console.log("Password does not match");
//       return res.status(401).json({ message: "Invalid credentials" });
//     }

//     // Generate a JWT
//     const token = jwt.sign({ userId: user._id }, secretKey, {
//       expiresIn: "1h",
//     });

//     res.status(200).json({ token });
//   } catch (error) {
//     console.error("Error:", error.message);
//     res.status(500).json({ message: "Error logging in" });
//   }
// });

// app.get("/verify-email/:token", async (req, res) => {
//   try {
//     const user = await User.findOne({
//       emailVerificationToken: req.params.token,
//     });

//     if (!user) return res.status(404).send("Invalid verification link.");

//     user.emailVerified = true;
//     user.emailVerificationToken = undefined; // Clear the verification token
//     await user.save();

//     res.send("Email verified successfully. You can now log in.");
//   } catch (error) {
//     console.error(error);
//     res.status(500).send("Internal Server Error");
//   }
// });

// // Test endpoint
// app.get("/test", (req, res) => {
//   res.send("Hello, world!");
// });

// // Test endpoint
// app.post("/test", (req, res) => {
//   console.log("Request body:", req.body);
//   res.status(200).json({ message: "Test endpoint reached" });
// });

// // ... (Remaining code for server configuration and listening)

// app.listen(PORT, () => {
//   console.log(`FLKM backend listening at http://localhost:${PORT}`);
// });
